<?php

/**
 * @file
 * Main file for hooks and custom functions.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;



function my_module_theme($existing, $type, $theme, $path) {
    return [
        'my-module-template' => [
            'variables' => ['test_var' => NULL],
        ],
    ];
}


/**
 * Implements hook_form_alter().
 */
function my_module_form_alter(&$form, FormStateInterface $form_state, $form_id) {
    if ($form_id == 'user_login_form') {
      $form['#submit'][] = 'my_module_submit_handler';
    }
  }

/**
 * Submit Handler for user_login_form.
 * if the user has the role of moderator - redirect to the page /admin/content,
 * otherwise redirect to the main.
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function my_module_submit_handler(&$form, FormStateInterface $form_state) {
  $role = \Drupal::currentUser()->getRoles();
  if (in_array('moderator', $role)) {
    $form_state->setRedirect('system.admin_content');
  } else {
    $form_state->setRedirect('<front>');
  }
}

/**
 * Implements hook_entity_presave().
 */
function my_module_entity_presave(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'node' && $entity->getType() == 'news' && $entity->field_date_news->value == '') {
    if (!$entity->isNew() && $entity->get('status')->getValue() != $entity->original->get('status')->getValue()) {
      $entity->field_date_news->value = date('m-d-Y') . 'T' . date('H:i');
  }
}
}

/**
 * Implements hook_entity_field_access().
 */

function my_module_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  if ($operation == 'edit' && $field_definition->getName() == 'field_date_news'
    && !$account->hasPermission('view field date news')) {
    return AccessResult::forbidden();
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_entity_access().
 */
function bda_m_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  if ($entity->getEntityTypeId() == 'node'
    && $entity->getType() == 'news'
    && $operation == 'view') {
    $entityDate = $entity->get('field_publication_date')->date->getTimestamp();
    $now = new DrupalDateTime('now');
    $now->setTimezone(new \DateTimeZone(DateTimeItemInterface::STORAGE_TIMEZONE));
    $now = $now->getTimestamp();
    if ($entityDate > $now) {
      if (in_array('moderator', $account->getRoles()) ||
        $account->id() == $entity->getOwnerId()) {
        return AccessResult::neutral();
      }
      else {
        return AccessResult::forbidden();
      }
    }
    return AccessResult::neutral();
  }
}

/**
 * Implements hook_preprocess_page_title().
 */
function my_module_preprocess_page_title(&$variables) {

  $node = \Drupal::request()->attributes->get('node');

  if ($node && $node->bundle() == 'news') {
    $variables['title'] = t('News: @title', ['@title' => $node->getTitle()]);
  }
}







